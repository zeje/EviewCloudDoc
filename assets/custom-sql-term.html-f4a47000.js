import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as t,f as a}from"./app-91913158.js";const e={},o=a(`<p>The platform uses extensible methods to construct SQL conditions, such as: like,gt,lt, etc.</p><h2 id="platform-built-in-sql-conditions" tabindex="-1"><a class="header-anchor" href="#platform-built-in-sql-conditions" aria-hidden="true">#</a> Platform built-in SQL conditions</h2><table><thead><tr><th>termType</th><th>SQL</th><th>DSL</th><th>说明</th></tr></thead><tbody><tr><td>is</td><td>eq</td><td>=</td><td>.is()</td></tr><tr><td>not</td><td>!=</td><td>.not()</td><td>unequal to</td></tr><tr><td>gt</td><td>&gt;</td><td>.gt()</td><td>be more/bigger than</td></tr><tr><td>lt</td><td>&lt;</td><td>.lt()</td><td>less than</td></tr><tr><td>gte</td><td>&gt;=</td><td>.gte()</td><td>greater than or equal to</td></tr><tr><td>lte</td><td>&lt;=</td><td>.lte()</td><td>less than or equal to</td></tr><tr><td>like</td><td>like</td><td>.like()</td><td>Fuzzy matching. You need to splice the value% by yourself.</td></tr><tr><td>nlike</td><td>not like</td><td>.notLike()</td><td>Same like</td></tr><tr><td>in</td><td>in</td><td>.in()</td><td>Values can be in the following format: 1,2,3,4 strings are separated by commas. [1,2,3,4] set.</td></tr><tr><td>nin</td><td>not in</td><td>.notIn()</td><td>Same in</td></tr><tr><td>isnull</td><td>is null</td><td>.isNull()</td><td>is null</td></tr><tr><td>notnull</td><td>not null</td><td>.notNull()</td><td>not null</td></tr><tr><td>empty</td><td>= &#39;&#39;</td><td>.isEmpty()</td><td>empty</td></tr><tr><td>nempty</td><td>!=&#39;&#39;</td><td>.notEmpty()</td><td>not empty</td></tr><tr><td>btw</td><td>between</td><td>.between()</td><td>between</td></tr><tr><td>nbtw</td><td>not between</td><td>.notBetween</td><td>not between</td></tr><tr><td>dev-group</td><td>exists(.....)</td><td>.where(&quot;deviceId$dev-group&quot;,groupId)</td><td>Group query by device</td></tr><tr><td>dev-same-group</td><td>exists(.....)</td><td>.where(&quot;deviceId$dev-same-group&quot;,anotherDeviceId)</td><td></td></tr><tr><td>dev-tag</td><td>exists(.....)</td><td>.where(&quot;deviceId$dev-tag&quot;,&quot;tagKey:tagValue&quot;)</td><td>Query by label, supported formats: key:value,[{&quot;key&quot;:&quot;tagKey&quot;,&quot;value&quot;:&quot;tagValue&quot;}]</td></tr></tbody></table><h2 id="used-in-front-end-general-query-conditions" tabindex="-1"><a class="header-anchor" href="#used-in-front-end-general-query-conditions" aria-hidden="true">#</a> Used in front-end general query conditions</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>  <span class="token property">&quot;where&quot;</span><span class="token operator">:</span> <span class="token string">&quot;deviceId custom 1234&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span><span class="token string">&quot;deviceId&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span><span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;1234&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="other-examples" tabindex="-1"><a class="header-anchor" href="#other-examples" aria-hidden="true">#</a> Other examples</h2><h3 id="eq" tabindex="-1"><a class="header-anchor" href="#eq" aria-hidden="true">#</a> eq</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span><span class="token string">&quot;eq&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;123456789012345&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;in&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;123456789012345&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;123456789012346&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="time-range" tabindex="-1"><a class="header-anchor" href="#time-range" aria-hidden="true">#</a> Time range</h3><h4 id="use-gte-greater-than-or-equal-to-to-combine-lte-less-than-or-equal-to" tabindex="-1"><a class="header-anchor" href="#use-gte-greater-than-or-equal-to-to-combine-lte-less-than-or-equal-to" aria-hidden="true">#</a> Use gte (greater than or equal to) to combine lte (less than or equal to).</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gte&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1672124830208</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lte&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1672124830210</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="use-between-mode" tabindex="-1"><a class="header-anchor" href="#use-between-mode" aria-hidden="true">#</a> Use between mode</h4><p>Note: Because of the time zone, it is not recommended to use strings.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;termType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;btw&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2023-02-01 00:00:00,2023-03-01 00:00:00&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If there is a $ sign in column, the part before $ will be disassembled into the value of column, and the part after $ will be disassembled into the value of $ termType.</p><p>Note: Because of the time zone, it is not recommended to use strings.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;createTime$btw&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2023-02-01 00:00:00,2023-03-01 00:00:00&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the corresponding field is of type long, it can be written as follows.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token string">&quot;createTime$btw&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1676441130975,1676441130975&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),p=[o];function i(d,l){return s(),t("div",null,p)}const c=n(e,[["render",i],["__file","custom-sql-term.html.vue"]]);export{c as default};
